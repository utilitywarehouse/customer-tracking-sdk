syntax = "proto3";

option go_package = ".;types";

message Actor {
  // used as the main identifier in tracking backend (ie
  // distinct_id in mixpanel)
  string id = 1;
  // map to attach actor attributes to each event, can be used for
  // account_number etc.
  map<string, string> attributes = 2;
}

message Application {
  string id = 1;
  // map to attach application attributes to each event, can be used for
  // build version etc.
  Channel channel = 2;
  map<string, string> attributes = 3;
}

enum Channel {
  CHANNEL_UNKNOWN = 0;
  CHANNEL_WEB = 1;
  CHANNEL_MOBILE = 2;
  CHANNEL_VOICE = 3;
  CHANNEL_CHAT = 4;
  CHANNEL_EMAIL = 5;
}

message Journey {
  string id = 1;
  JourneyIntent intent = 2;
  JourneySubject subject = 3;
}

message JourneyStage {
  Journey journey = 1;
  Actor actor = 2;
  Application application = 3;
  // step is optional and can be used to track microjourneys within journeys
  string step = 4;
}

message Interaction {
  InteractionType type = 1;
  InteractionTargetType target_type = 2;
  string target = 3;
}

enum InteractionType {
  INTERACTION_TYPE_UNKNOWN = 0;
}

enum InteractionTargetType {
  INTERACTION_TARGET_TYPE_UNKNOWN = 0;
}

// JourneyInteraction used to track significant microinteractions during journeys
// a good example is switching an additional option during product selection etc
message JourneyInteraction {
  Journey journey = 1;
  Actor actor = 2;
  Application application = 3;
  Interaction interaction = 4;
  string step = 5;
}

// JourneyIntent describes what we are trying to make the customer do against
// a specific JourneySubject, this should be universal and mostly applicable to
// any subject, a good example NEW_SERVICE_OR_UPGRADE, PREFERENCES_UPDATE, bad example NEW_MOBILE_SERVICE
enum JourneyIntent {
  JOURNEY_INTENT_UNKNOWN = 0;
}

// JourneySubject should describe one of the aggregate roots or important entities
// things like MOBILE_SERVICE, CONTACT_PREFERENCES etc.
enum JourneySubject {
  JOURNEY_SUBJECT_UNKNOWN = 0;
}
