// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tracking.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Subject int32

const (
	SUBJECT_NONE                     Subject = 0
	SUBJECT_METER_READING            Subject = 1
	SUBJECT_CUSTOMER_REFERRAL        Subject = 2
	SUBJECT_BILL                     Subject = 3
	SUBJECT_ENERGY_PREFERENCES       Subject = 4
	SUBJECT_HELP                     Subject = 5
	SUBJECT_CUSTOMER_AUTH            Subject = 6
	SUBJECT_MOBILE_SIM               Subject = 7
	SUBJECT_SMART_METER_INSTALLATION Subject = 8
	SUBJECT_CUSTOMER_OVERDUE_BALANCE Subject = 9
	SUBJECT_INSURANCE_QUOTE          Subject = 10
	SUBJECT_OPENING_METER_READING    Subject = 11
	SUBJECT_CASHBACK                 Subject = 12
	SUBJECT_ROUTER_SETUP             Subject = 13
	SUBJECT_DOWNLOAD_APP             Subject = 14
)

var Subject_name = map[int32]string{
	0:  "SUBJECT_NONE",
	1:  "SUBJECT_METER_READING",
	2:  "SUBJECT_CUSTOMER_REFERRAL",
	3:  "SUBJECT_BILL",
	4:  "SUBJECT_ENERGY_PREFERENCES",
	5:  "SUBJECT_HELP",
	6:  "SUBJECT_CUSTOMER_AUTH",
	7:  "SUBJECT_MOBILE_SIM",
	8:  "SUBJECT_SMART_METER_INSTALLATION",
	9:  "SUBJECT_CUSTOMER_OVERDUE_BALANCE",
	10: "SUBJECT_INSURANCE_QUOTE",
	11: "SUBJECT_OPENING_METER_READING",
	12: "SUBJECT_CASHBACK",
	13: "SUBJECT_ROUTER_SETUP",
	14: "SUBJECT_DOWNLOAD_APP",
}

var Subject_value = map[string]int32{
	"SUBJECT_NONE":                     0,
	"SUBJECT_METER_READING":            1,
	"SUBJECT_CUSTOMER_REFERRAL":        2,
	"SUBJECT_BILL":                     3,
	"SUBJECT_ENERGY_PREFERENCES":       4,
	"SUBJECT_HELP":                     5,
	"SUBJECT_CUSTOMER_AUTH":            6,
	"SUBJECT_MOBILE_SIM":               7,
	"SUBJECT_SMART_METER_INSTALLATION": 8,
	"SUBJECT_CUSTOMER_OVERDUE_BALANCE": 9,
	"SUBJECT_INSURANCE_QUOTE":          10,
	"SUBJECT_OPENING_METER_READING":    11,
	"SUBJECT_CASHBACK":                 12,
	"SUBJECT_ROUTER_SETUP":             13,
	"SUBJECT_DOWNLOAD_APP":             14,
}

func (Subject) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{0}
}

type Intent int32

const (
	INTENT_NONE                         Intent = 0
	INTENT_METER_READING_SUBMIT         Intent = 1
	INTENT_LEAD_CAPTURE                 Intent = 2
	INTENT_PAYMENT                      Intent = 3
	INTENT_FRIEND_REFERRAL_LINK_SHARE   Intent = 4
	INTENT_PREFERENCES_UPDATE           Intent = 5
	INTENT_CONTACT_SUPPORT              Intent = 6
	INTENT_LEAVE_FEEDBACK               Intent = 7
	INTENT_LOGIN                        Intent = 8
	INTENT_MOBILE_SIM_UPGRADE           Intent = 9
	INTENT_APPOINTMENT_BOOKING          Intent = 10
	INTENT_FIND_HELP                    Intent = 11
	INTENT_APPOINTMENT_RESCHEDULE       Intent = 12
	INTENT_CREATE_INSURANCE_QUOTE       Intent = 13
	INTENT_RETRIEVE_INSURANCE_QUOTE     Intent = 14
	INTENT_SUBMIT_OPENING_METER_READING Intent = 15
	INTENT_DOWNLOAD_APP                 Intent = 16
)

var Intent_name = map[int32]string{
	0:  "INTENT_NONE",
	1:  "INTENT_METER_READING_SUBMIT",
	2:  "INTENT_LEAD_CAPTURE",
	3:  "INTENT_PAYMENT",
	4:  "INTENT_FRIEND_REFERRAL_LINK_SHARE",
	5:  "INTENT_PREFERENCES_UPDATE",
	6:  "INTENT_CONTACT_SUPPORT",
	7:  "INTENT_LEAVE_FEEDBACK",
	8:  "INTENT_LOGIN",
	9:  "INTENT_MOBILE_SIM_UPGRADE",
	10: "INTENT_APPOINTMENT_BOOKING",
	11: "INTENT_FIND_HELP",
	12: "INTENT_APPOINTMENT_RESCHEDULE",
	13: "INTENT_CREATE_INSURANCE_QUOTE",
	14: "INTENT_RETRIEVE_INSURANCE_QUOTE",
	15: "INTENT_SUBMIT_OPENING_METER_READING",
	16: "INTENT_DOWNLOAD_APP",
}

var Intent_value = map[string]int32{
	"INTENT_NONE":                         0,
	"INTENT_METER_READING_SUBMIT":         1,
	"INTENT_LEAD_CAPTURE":                 2,
	"INTENT_PAYMENT":                      3,
	"INTENT_FRIEND_REFERRAL_LINK_SHARE":   4,
	"INTENT_PREFERENCES_UPDATE":           5,
	"INTENT_CONTACT_SUPPORT":              6,
	"INTENT_LEAVE_FEEDBACK":               7,
	"INTENT_LOGIN":                        8,
	"INTENT_MOBILE_SIM_UPGRADE":           9,
	"INTENT_APPOINTMENT_BOOKING":          10,
	"INTENT_FIND_HELP":                    11,
	"INTENT_APPOINTMENT_RESCHEDULE":       12,
	"INTENT_CREATE_INSURANCE_QUOTE":       13,
	"INTENT_RETRIEVE_INSURANCE_QUOTE":     14,
	"INTENT_SUBMIT_OPENING_METER_READING": 15,
	"INTENT_DOWNLOAD_APP":                 16,
}

func (Intent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{1}
}

type Stage int32

const (
	STAGE_NONE                       Stage = 0
	STAGE_SUBMITTED                  Stage = 1
	STAGE_RECEIVED_REQUEST_FOR_AMEND Stage = 2
	STAGE_COMPLETED                  Stage = 3
	STAGE_REJECTED                   Stage = 4
	STAGE_ENTERED                    Stage = 5
	STAGE_STARTED                    Stage = 6
	STAGE_FAILED                     Stage = 7
)

var Stage_name = map[int32]string{
	0: "STAGE_NONE",
	1: "STAGE_SUBMITTED",
	2: "STAGE_RECEIVED_REQUEST_FOR_AMEND",
	3: "STAGE_COMPLETED",
	4: "STAGE_REJECTED",
	5: "STAGE_ENTERED",
	6: "STAGE_STARTED",
	7: "STAGE_FAILED",
}

var Stage_value = map[string]int32{
	"STAGE_NONE":                       0,
	"STAGE_SUBMITTED":                  1,
	"STAGE_RECEIVED_REQUEST_FOR_AMEND": 2,
	"STAGE_COMPLETED":                  3,
	"STAGE_REJECTED":                   4,
	"STAGE_ENTERED":                    5,
	"STAGE_STARTED":                    6,
	"STAGE_FAILED":                     7,
}

func (Stage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{2}
}

type Interaction int32

const (
	INTERACTION_NONE     Interaction = 0
	INTERACTION_CLICKED  Interaction = 1
	INTERACTION_VIEWED   Interaction = 2
	INTERACTION_SEARCHED Interaction = 3
)

var Interaction_name = map[int32]string{
	0: "INTERACTION_NONE",
	1: "INTERACTION_CLICKED",
	2: "INTERACTION_VIEWED",
	3: "INTERACTION_SEARCHED",
}

var Interaction_value = map[string]int32{
	"INTERACTION_NONE":     0,
	"INTERACTION_CLICKED":  1,
	"INTERACTION_VIEWED":   2,
	"INTERACTION_SEARCHED": 3,
}

func (Interaction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{3}
}

type InteractionChannel int32

const (
	INTERACTION_CHANNEL_NONE                   InteractionChannel = 0
	INTERACTION_CHANNEL_EMAIL                  InteractionChannel = 1
	INTERACTION_CHANNEL_WILLIAM                InteractionChannel = 2
	INTERACTION_CHANNEL_RESIDENTIAL_MOBILE_APP InteractionChannel = 3
	INTERACTION_CHANNEL_RESIDENTIAL_WEB_APP    InteractionChannel = 5
	INTERACTION_CHANNEL_HELP_CENTRE_WEB        InteractionChannel = 6
	INTERACTION_CHANNEL_SMS                    InteractionChannel = 7
)

var InteractionChannel_name = map[int32]string{
	0: "INTERACTION_CHANNEL_NONE",
	1: "INTERACTION_CHANNEL_EMAIL",
	2: "INTERACTION_CHANNEL_WILLIAM",
	3: "INTERACTION_CHANNEL_RESIDENTIAL_MOBILE_APP",
	5: "INTERACTION_CHANNEL_RESIDENTIAL_WEB_APP",
	6: "INTERACTION_CHANNEL_HELP_CENTRE_WEB",
	7: "INTERACTION_CHANNEL_SMS",
}

var InteractionChannel_value = map[string]int32{
	"INTERACTION_CHANNEL_NONE":                   0,
	"INTERACTION_CHANNEL_EMAIL":                  1,
	"INTERACTION_CHANNEL_WILLIAM":                2,
	"INTERACTION_CHANNEL_RESIDENTIAL_MOBILE_APP": 3,
	"INTERACTION_CHANNEL_RESIDENTIAL_WEB_APP":    5,
	"INTERACTION_CHANNEL_HELP_CENTRE_WEB":        6,
	"INTERACTION_CHANNEL_SMS":                    7,
}

func (InteractionChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{4}
}

type Actor struct {
	// used as the main identifier in tracking backend (ie
	// distinct_id in mixpanel)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// map to attach actor attributes to each event, can be used for
	// account_number etc.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Actor) Reset()      { *m = Actor{} }
func (*Actor) ProtoMessage() {}
func (*Actor) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{0}
}
func (m *Actor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Actor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Actor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Actor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Actor.Merge(m, src)
}
func (m *Actor) XXX_Size() int {
	return m.Size()
}
func (m *Actor) XXX_DiscardUnknown() {
	xxx_messageInfo_Actor.DiscardUnknown(m)
}

var xxx_messageInfo_Actor proto.InternalMessageInfo

func (m *Actor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Actor) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Application struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// map to attach application attributes to each event, can be used for
	// build version etc.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Application) Reset()      { *m = Application{} }
func (*Application) ProtoMessage() {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{1}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Application) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type StageEvent struct {
	Actor       *Actor            `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Application *Application      `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Subject     Subject           `protobuf:"varint,3,opt,name=subject,proto3,enum=Subject" json:"subject,omitempty"`
	Intent      Intent            `protobuf:"varint,4,opt,name=intent,proto3,enum=Intent" json:"intent,omitempty"`
	Stage       Stage             `protobuf:"varint,5,opt,name=stage,proto3,enum=Stage" json:"stage,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StageEvent) Reset()      { *m = StageEvent{} }
func (*StageEvent) ProtoMessage() {}
func (*StageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{2}
}
func (m *StageEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StageEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageEvent.Merge(m, src)
}
func (m *StageEvent) XXX_Size() int {
	return m.Size()
}
func (m *StageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StageEvent proto.InternalMessageInfo

func (m *StageEvent) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *StageEvent) GetApplication() *Application {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *StageEvent) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *StageEvent) GetIntent() Intent {
	if m != nil {
		return m.Intent
	}
	return INTENT_NONE
}

func (m *StageEvent) GetStage() Stage {
	if m != nil {
		return m.Stage
	}
	return STAGE_NONE
}

func (m *StageEvent) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type InteractionEvent struct {
	Actor       *Actor             `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Application *Application       `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Subject     Subject            `protobuf:"varint,3,opt,name=subject,proto3,enum=Subject" json:"subject,omitempty"`
	Intent      Intent             `protobuf:"varint,4,opt,name=intent,proto3,enum=Intent" json:"intent,omitempty"`
	Interaction Interaction        `protobuf:"varint,5,opt,name=interaction,proto3,enum=Interaction" json:"interaction,omitempty"`
	Channel     InteractionChannel `protobuf:"varint,6,opt,name=channel,proto3,enum=InteractionChannel" json:"channel,omitempty"`
	Attributes  map[string]string  `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InteractionEvent) Reset()      { *m = InteractionEvent{} }
func (*InteractionEvent) ProtoMessage() {}
func (*InteractionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{3}
}
func (m *InteractionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractionEvent.Merge(m, src)
}
func (m *InteractionEvent) XXX_Size() int {
	return m.Size()
}
func (m *InteractionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_InteractionEvent proto.InternalMessageInfo

func (m *InteractionEvent) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *InteractionEvent) GetApplication() *Application {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *InteractionEvent) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *InteractionEvent) GetIntent() Intent {
	if m != nil {
		return m.Intent
	}
	return INTENT_NONE
}

func (m *InteractionEvent) GetInteraction() Interaction {
	if m != nil {
		return m.Interaction
	}
	return INTERACTION_NONE
}

func (m *InteractionEvent) GetChannel() InteractionChannel {
	if m != nil {
		return m.Channel
	}
	return INTERACTION_CHANNEL_NONE
}

func (m *InteractionEvent) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type VisitEvent struct {
	Actor       *Actor            `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Application *Application      `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Location    string            `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VisitEvent) Reset()      { *m = VisitEvent{} }
func (*VisitEvent) ProtoMessage() {}
func (*VisitEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{4}
}
func (m *VisitEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VisitEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VisitEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VisitEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisitEvent.Merge(m, src)
}
func (m *VisitEvent) XXX_Size() int {
	return m.Size()
}
func (m *VisitEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_VisitEvent.DiscardUnknown(m)
}

var xxx_messageInfo_VisitEvent proto.InternalMessageInfo

func (m *VisitEvent) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *VisitEvent) GetApplication() *Application {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *VisitEvent) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *VisitEvent) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ClickEvent struct {
	Actor       *Actor            `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Application *Application      `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Target      string            `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Attributes  map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ClickEvent) Reset()      { *m = ClickEvent{} }
func (*ClickEvent) ProtoMessage() {}
func (*ClickEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_62a1d65b4bf956e8, []int{5}
}
func (m *ClickEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickEvent.Merge(m, src)
}
func (m *ClickEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClickEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClickEvent proto.InternalMessageInfo

func (m *ClickEvent) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *ClickEvent) GetApplication() *Application {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *ClickEvent) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ClickEvent) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("Subject", Subject_name, Subject_value)
	proto.RegisterEnum("Intent", Intent_name, Intent_value)
	proto.RegisterEnum("Stage", Stage_name, Stage_value)
	proto.RegisterEnum("Interaction", Interaction_name, Interaction_value)
	proto.RegisterEnum("InteractionChannel", InteractionChannel_name, InteractionChannel_value)
	proto.RegisterType((*Actor)(nil), "Actor")
	proto.RegisterMapType((map[string]string)(nil), "Actor.AttributesEntry")
	proto.RegisterType((*Application)(nil), "Application")
	proto.RegisterMapType((map[string]string)(nil), "Application.AttributesEntry")
	proto.RegisterType((*StageEvent)(nil), "StageEvent")
	proto.RegisterMapType((map[string]string)(nil), "StageEvent.AttributesEntry")
	proto.RegisterType((*InteractionEvent)(nil), "InteractionEvent")
	proto.RegisterMapType((map[string]string)(nil), "InteractionEvent.AttributesEntry")
	proto.RegisterType((*VisitEvent)(nil), "VisitEvent")
	proto.RegisterMapType((map[string]string)(nil), "VisitEvent.AttributesEntry")
	proto.RegisterType((*ClickEvent)(nil), "ClickEvent")
	proto.RegisterMapType((map[string]string)(nil), "ClickEvent.AttributesEntry")
}

func init() { proto.RegisterFile("tracking.proto", fileDescriptor_62a1d65b4bf956e8) }

var fileDescriptor_62a1d65b4bf956e8 = []byte{
	// 1181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0x16, 0xf5, 0xd3, 0x79, 0x72, 0xe4, 0xeb, 0xc5, 0x75, 0x14, 0x27, 0x61, 0x1c, 0xa7, 0x45,
	0x02, 0x17, 0xe5, 0xe0, 0x02, 0x45, 0xd1, 0x34, 0xc3, 0x89, 0x7c, 0xb6, 0xaf, 0xa6, 0x8e, 0xcc,
	0xf1, 0x28, 0x23, 0x5d, 0x08, 0x45, 0x11, 0x52, 0x35, 0x86, 0x6c, 0xc8, 0x4c, 0x80, 0x6c, 0x9d,
	0x3a, 0x16, 0x9d, 0xdb, 0xad, 0x53, 0xf7, 0x4e, 0xfd, 0x0f, 0x3a, 0x66, 0xcc, 0xd8, 0xc8, 0x4b,
	0xa7, 0x22, 0xe8, 0xd4, 0xb1, 0x38, 0x8a, 0x94, 0x68, 0xd9, 0x41, 0x27, 0x01, 0xdd, 0x74, 0xdf,
	0xfb, 0xde, 0xbd, 0xef, 0xbd, 0xef, 0x91, 0x84, 0xa0, 0x11, 0x8f, 0xba, 0xbd, 0x67, 0x83, 0xe1,
	0x53, 0xeb, 0x78, 0x74, 0x14, 0x1f, 0x6d, 0x7e, 0x6f, 0x40, 0x85, 0xf5, 0xe2, 0xa3, 0x11, 0x6d,
	0x40, 0x71, 0xf0, 0xa4, 0x69, 0x6c, 0x18, 0xf7, 0x2e, 0xc9, 0xe2, 0xe0, 0x09, 0xfd, 0x14, 0xa0,
	0x1b, 0xc7, 0xa3, 0xc1, 0xe3, 0xe7, 0x71, 0xff, 0xa4, 0x59, 0xdc, 0x28, 0xdd, 0xab, 0x6f, 0xaf,
	0x59, 0x09, 0xd7, 0x62, 0xd3, 0x00, 0x0e, 0xe3, 0xd1, 0x4b, 0x99, 0x63, 0xae, 0x3f, 0x80, 0x95,
	0xb9, 0x30, 0x25, 0x50, 0x7a, 0xd6, 0x7f, 0x99, 0xde, 0xad, 0x7f, 0xd2, 0x55, 0xa8, 0xbc, 0xe8,
	0x1e, 0x3e, 0xef, 0x37, 0x8b, 0x09, 0x36, 0x39, 0x7c, 0x5e, 0xfc, 0xcc, 0xd8, 0xfc, 0xd1, 0x80,
	0x3a, 0x3b, 0x3e, 0x3e, 0x1c, 0xf4, 0xba, 0xf1, 0xe0, 0x68, 0x78, 0x4e, 0xd6, 0x17, 0x17, 0xc8,
	0xba, 0x61, 0xe5, 0x32, 0x16, 0x29, 0xee, 0xb7, 0x22, 0x40, 0x10, 0x77, 0x9f, 0xf6, 0xf1, 0x45,
	0x7f, 0x18, 0xd3, 0x1b, 0x50, 0xe9, 0xea, 0x79, 0x24, 0xc9, 0xf5, 0xed, 0xea, 0x64, 0x3a, 0x72,
	0x02, 0x52, 0x0b, 0xea, 0xdd, 0x99, 0xac, 0xe4, 0xb2, 0xfa, 0xf6, 0x72, 0x5e, 0xaa, 0xcc, 0x13,
	0xe8, 0x26, 0xd4, 0x4e, 0x9e, 0x3f, 0xfe, 0xa6, 0xdf, 0x8b, 0x9b, 0xa5, 0x0d, 0xe3, 0x5e, 0x63,
	0x7b, 0xc9, 0x0a, 0x26, 0x67, 0x99, 0x05, 0xe8, 0x2d, 0xa8, 0x0e, 0x86, 0x71, 0x7f, 0x18, 0x37,
	0xcb, 0x09, 0xa5, 0x66, 0xf1, 0xe4, 0x28, 0x53, 0x58, 0x4b, 0x3a, 0xd1, 0x02, 0x9b, 0x95, 0x24,
	0x5e, 0xb5, 0x12, 0xb9, 0x72, 0x02, 0xd2, 0xfb, 0x67, 0x86, 0x57, 0x4d, 0x86, 0x77, 0xdd, 0x9a,
	0x75, 0xb4, 0xc8, 0xd9, 0x7d, 0x57, 0x02, 0xa2, 0xc5, 0x8e, 0xba, 0x3d, 0xdd, 0xee, 0xff, 0x76,
	0x82, 0x16, 0xd4, 0x07, 0x33, 0x99, 0xe9, 0x1c, 0x97, 0xad, 0x9c, 0x74, 0x99, 0x27, 0xd0, 0x8f,
	0xa1, 0xd6, 0xfb, 0xba, 0x3b, 0x1c, 0xf6, 0x0f, 0x9b, 0xd5, 0x84, 0x7b, 0x25, 0xcf, 0xb5, 0x27,
	0x21, 0x99, 0x71, 0x28, 0x3b, 0x63, 0x41, 0x2d, 0xb1, 0xe0, 0xb6, 0x35, 0x3f, 0x98, 0x45, 0x1a,
	0xf1, 0xb7, 0x01, 0xd0, 0x19, 0x9c, 0x0c, 0xe2, 0x45, 0x58, 0xb0, 0x0e, 0x4b, 0x87, 0x47, 0x29,
	0xb9, 0x94, 0x54, 0x9e, 0x9e, 0xe7, 0xb6, 0xaf, 0x9c, 0x6e, 0xdf, 0x4c, 0xca, 0x22, 0x9b, 0xfe,
	0xcb, 0x00, 0xb0, 0x0f, 0x07, 0xbd, 0x67, 0x8b, 0x68, 0x7a, 0x0d, 0xaa, 0x71, 0x77, 0xf4, 0xb4,
	0x1f, 0xa7, 0x2d, 0xa7, 0xa7, 0x77, 0x34, 0x3c, 0x93, 0xb1, 0xc0, 0x86, 0xb7, 0x7e, 0x2e, 0x41,
	0x2d, 0x5d, 0x7e, 0x4a, 0x60, 0x39, 0x08, 0x5b, 0x5f, 0xa2, 0xad, 0x22, 0xe1, 0x09, 0x24, 0x05,
	0x7a, 0x0d, 0xde, 0xcf, 0x90, 0x36, 0x2a, 0x94, 0x91, 0x44, 0xe6, 0x70, 0xb1, 0x4b, 0x0c, 0x7a,
	0x13, 0xae, 0x65, 0x21, 0x3b, 0x0c, 0x94, 0xd7, 0x4e, 0xa2, 0x3b, 0x28, 0x25, 0x73, 0x49, 0x31,
	0x7f, 0x57, 0x8b, 0xbb, 0x2e, 0x29, 0x51, 0x13, 0xd6, 0x33, 0x04, 0x05, 0xca, 0xdd, 0x47, 0x91,
	0x9f, 0xf0, 0x51, 0xd8, 0x18, 0x90, 0x72, 0x3e, 0x63, 0x0f, 0x5d, 0x9f, 0x54, 0xf2, 0xd5, 0xa7,
	0x25, 0x58, 0xa8, 0xf6, 0x48, 0x95, 0xae, 0x01, 0x9d, 0x0a, 0xf3, 0x5a, 0xdc, 0xc5, 0x28, 0xe0,
	0x6d, 0x52, 0xa3, 0x1f, 0xc0, 0x46, 0x86, 0x07, 0x6d, 0x26, 0x33, 0xd9, 0x5c, 0x04, 0x8a, 0xb9,
	0x2e, 0x53, 0xdc, 0x13, 0x64, 0x29, 0xcf, 0x9a, 0x5e, 0xec, 0x75, 0x50, 0x3a, 0x21, 0x46, 0x2d,
	0xe6, 0x32, 0x61, 0x23, 0xb9, 0x44, 0xaf, 0xc3, 0xd5, 0x8c, 0xc5, 0x45, 0x10, 0x4a, 0x0d, 0x47,
	0x0f, 0x43, 0x4f, 0x21, 0x01, 0x7a, 0x1b, 0x6e, 0x66, 0x41, 0xcf, 0x47, 0xc1, 0xc5, 0xee, 0xdc,
	0x84, 0xea, 0x74, 0x15, 0xc8, 0xb4, 0x0a, 0x0b, 0xf6, 0x5a, 0xcc, 0xde, 0x27, 0xcb, 0xb4, 0x09,
	0xab, 0x19, 0x2a, 0xbd, 0x50, 0x67, 0x04, 0xa8, 0x42, 0x9f, 0x5c, 0xce, 0x47, 0x1c, 0xef, 0x40,
	0xb8, 0x1e, 0x73, 0x22, 0xe6, 0xfb, 0xa4, 0xb1, 0xf5, 0x4f, 0x09, 0xaa, 0x93, 0xd7, 0x0f, 0x5d,
	0x81, 0x3a, 0x17, 0x0a, 0xc5, 0xd4, 0xa2, 0x5b, 0x70, 0x3d, 0x05, 0xce, 0xd4, 0x8f, 0x82, 0xb0,
	0xd5, 0xe6, 0x8a, 0x18, 0xf4, 0x2a, 0x5c, 0x49, 0x09, 0x2e, 0x32, 0x27, 0xb2, 0x99, 0xaf, 0x42,
	0x89, 0xa4, 0x48, 0x29, 0x34, 0xd2, 0x80, 0xcf, 0x1e, 0xb5, 0x51, 0x28, 0x52, 0xa2, 0x1f, 0xc2,
	0xed, 0x14, 0xdb, 0x91, 0x1c, 0x85, 0x33, 0xb5, 0x34, 0x72, 0xb9, 0xd8, 0x8f, 0x82, 0x3d, 0x26,
	0x91, 0x94, 0xb5, 0xf9, 0x59, 0xea, 0xcc, 0xc3, 0x28, 0xf4, 0x1d, 0xa6, 0x90, 0x54, 0xe8, 0x3a,
	0xac, 0xa5, 0x61, 0xdb, 0x13, 0x8a, 0x69, 0x33, 0x42, 0xdf, 0xf7, 0xa4, 0x22, 0x55, 0x6d, 0xea,
	0x4c, 0x4e, 0x07, 0xa3, 0x1d, 0x44, 0x27, 0x19, 0x4d, 0x4d, 0x6f, 0x40, 0x16, 0xf2, 0x76, 0xb9,
	0x36, 0x6a, 0x56, 0x67, 0xe6, 0x72, 0x14, 0xfa, 0xbb, 0x92, 0x39, 0xda, 0x21, 0x13, 0xd6, 0xd3,
	0x30, 0xf3, 0x7d, 0x8f, 0x0b, 0xa5, 0xbb, 0x88, 0x5a, 0x9e, 0xb7, 0xaf, 0x1d, 0x00, 0xed, 0x40,
	0xd6, 0x0d, 0x17, 0xce, 0x64, 0xad, 0xea, 0xda, 0xba, 0x0b, 0xb2, 0x24, 0x06, 0xf6, 0x1e, 0x3a,
	0xa1, 0x8b, 0x64, 0x39, 0x47, 0xb1, 0x25, 0x32, 0x85, 0xe7, 0x16, 0xe0, 0x32, 0xbd, 0x03, 0xb7,
	0x52, 0x8a, 0x44, 0x25, 0x39, 0x76, 0xce, 0x93, 0x1a, 0xf4, 0x2e, 0xdc, 0x49, 0x49, 0x13, 0x3b,
	0xde, 0xb1, 0x2b, 0x2b, 0x39, 0x93, 0xce, 0x58, 0x4f, 0xb6, 0x7e, 0x35, 0xa0, 0x92, 0x7c, 0x78,
	0x69, 0x03, 0x20, 0x50, 0x6c, 0x17, 0x33, 0xe3, 0xaf, 0xc0, 0xca, 0xe4, 0x3c, 0xb9, 0x5a, 0xa1,
	0x43, 0x8c, 0x64, 0xb3, 0x13, 0x50, 0xa2, 0x8d, 0xbc, 0x83, 0xda, 0xc0, 0x87, 0x21, 0x06, 0x2a,
	0xda, 0xf1, 0x64, 0xc4, 0xda, 0x28, 0x1c, 0x52, 0x9c, 0xa5, 0xda, 0x5e, 0xdb, 0x77, 0x51, 0xa7,
	0x96, 0xf4, 0x3a, 0x64, 0xa9, 0x7a, 0x07, 0xd1, 0x21, 0x65, 0xfa, 0x1e, 0x5c, 0x9e, 0x60, 0x28,
	0x14, 0x4a, 0x74, 0x48, 0x65, 0x06, 0x05, 0x8a, 0x49, 0xcd, 0xaa, 0x26, 0x4f, 0x6e, 0x02, 0xed,
	0x30, 0xee, 0xa2, 0x43, 0x6a, 0x5b, 0x43, 0xa8, 0xe7, 0x3e, 0x55, 0x99, 0x0f, 0x92, 0xd9, 0xfa,
	0x01, 0xcc, 0x1a, 0x48, 0x7b, 0xce, 0x50, 0xdb, 0xe5, 0xf6, 0x7e, 0xd2, 0xc4, 0x1a, 0xd0, 0x7c,
	0xa0, 0xc3, 0xf1, 0x00, 0xb5, 0xec, 0x26, 0xac, 0xe6, 0xf1, 0x00, 0x99, 0xd4, 0x96, 0x91, 0xd2,
	0xd6, 0x4f, 0x45, 0xa0, 0xe7, 0xbf, 0xa6, 0xf4, 0x06, 0x34, 0xcf, 0x54, 0xd8, 0x63, 0x42, 0xa0,
	0x9b, 0xd5, 0x4f, 0x97, 0x6b, 0x3e, 0x8a, 0x6d, 0xc6, 0x5d, 0x62, 0x64, 0x0f, 0xd6, 0x7c, 0xf8,
	0x80, 0xbb, 0x2e, 0x67, 0x6d, 0x52, 0xa4, 0x16, 0x6c, 0x5d, 0x44, 0x90, 0x18, 0x70, 0x07, 0x85,
	0xe2, 0xcc, 0xcd, 0xb6, 0x56, 0x5b, 0x59, 0xa2, 0x1f, 0xc1, 0xdd, 0xff, 0xe2, 0x1f, 0x60, 0x2b,
	0x21, 0x57, 0xb2, 0xcd, 0x99, 0x27, 0xeb, 0x15, 0x8e, 0x6c, 0x14, 0x4a, 0xa2, 0x26, 0x93, 0xaa,
	0x7e, 0x4b, 0x5d, 0x44, 0x0c, 0xda, 0x01, 0xa9, 0x6d, 0x96, 0x97, 0xca, 0xa4, 0xdc, 0x7a, 0xf0,
	0xea, 0x8d, 0x59, 0x78, 0xfd, 0xc6, 0x2c, 0xbc, 0x7d, 0x63, 0x1a, 0xdf, 0x8e, 0x4d, 0xe3, 0x97,
	0xb1, 0x69, 0xfc, 0x3e, 0x36, 0x8d, 0x57, 0x63, 0xd3, 0xf8, 0x63, 0x6c, 0x1a, 0x7f, 0x8e, 0xcd,
	0xc2, 0xdb, 0xb1, 0x69, 0xfc, 0x70, 0x6a, 0x16, 0x5e, 0x9d, 0x9a, 0x85, 0xd7, 0xa7, 0x66, 0xe1,
	0xab, 0x9a, 0x75, 0x3f, 0x7e, 0x79, 0xdc, 0x3f, 0x79, 0x5c, 0x4d, 0xfe, 0x02, 0x7c, 0xf2, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x63, 0x84, 0x7d, 0x14, 0x0c, 0x00, 0x00,
}

func (x Subject) String() string {
	s, ok := Subject_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Intent) String() string {
	s, ok := Intent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Stage) String() string {
	s, ok := Stage_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Interaction) String() string {
	s, ok := Interaction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InteractionChannel) String() string {
	s, ok := InteractionChannel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Actor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Actor)
	if !ok {
		that2, ok := that.(Actor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *StageEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StageEvent)
	if !ok {
		that2, ok := that.(StageEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actor.Equal(that1.Actor) {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Intent != that1.Intent {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *InteractionEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractionEvent)
	if !ok {
		that2, ok := that.(InteractionEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actor.Equal(that1.Actor) {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Intent != that1.Intent {
		return false
	}
	if this.Interaction != that1.Interaction {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *VisitEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VisitEvent)
	if !ok {
		that2, ok := that.(VisitEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actor.Equal(that1.Actor) {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *ClickEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClickEvent)
	if !ok {
		that2, ok := that.(ClickEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actor.Equal(that1.Actor) {
		return false
	}
	if !this.Application.Equal(that1.Application) {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	return true
}
func (this *Actor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.Actor{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.Application{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StageEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&types.StageEvent{")
	if this.Actor != nil {
		s = append(s, "Actor: "+fmt.Sprintf("%#v", this.Actor)+",\n")
	}
	if this.Application != nil {
		s = append(s, "Application: "+fmt.Sprintf("%#v", this.Application)+",\n")
	}
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Intent: "+fmt.Sprintf("%#v", this.Intent)+",\n")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractionEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&types.InteractionEvent{")
	if this.Actor != nil {
		s = append(s, "Actor: "+fmt.Sprintf("%#v", this.Actor)+",\n")
	}
	if this.Application != nil {
		s = append(s, "Application: "+fmt.Sprintf("%#v", this.Application)+",\n")
	}
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Intent: "+fmt.Sprintf("%#v", this.Intent)+",\n")
	s = append(s, "Interaction: "+fmt.Sprintf("%#v", this.Interaction)+",\n")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.VisitEvent{")
	if this.Actor != nil {
		s = append(s, "Actor: "+fmt.Sprintf("%#v", this.Actor)+",\n")
	}
	if this.Application != nil {
		s = append(s, "Application: "+fmt.Sprintf("%#v", this.Application)+",\n")
	}
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClickEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.ClickEvent{")
	if this.Actor != nil {
		s = append(s, "Actor: "+fmt.Sprintf("%#v", this.Actor)+",\n")
	}
	if this.Application != nil {
		s = append(s, "Application: "+fmt.Sprintf("%#v", this.Application)+",\n")
	}
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTracking(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Actor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Actor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Actor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTracking(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTracking(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StageEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Stage != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x28
	}
	if m.Intent != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Intent))
		i--
		dAtA[i] = 0x20
	}
	if m.Subject != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x18
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Channel != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x30
	}
	if m.Interaction != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x28
	}
	if m.Intent != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Intent))
		i--
		dAtA[i] = 0x20
	}
	if m.Subject != 0 {
		i = encodeVarintTracking(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x18
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VisitEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisitEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VisitEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintTracking(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClickEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracking(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTracking(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Application != nil {
		{
			size, err := m.Application.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTracking(dAtA []byte, offset int, v uint64) int {
	offset -= sovTracking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Actor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTracking(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTracking(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StageEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovTracking(uint64(m.Subject))
	}
	if m.Intent != 0 {
		n += 1 + sovTracking(uint64(m.Intent))
	}
	if m.Stage != 0 {
		n += 1 + sovTracking(uint64(m.Stage))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *InteractionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovTracking(uint64(m.Subject))
	}
	if m.Intent != 0 {
		n += 1 + sovTracking(uint64(m.Intent))
	}
	if m.Interaction != 0 {
		n += 1 + sovTracking(uint64(m.Interaction))
	}
	if m.Channel != 0 {
		n += 1 + sovTracking(uint64(m.Channel))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VisitEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovTracking(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClickEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	if m.Application != nil {
		l = m.Application.Size()
		n += 1 + l + sovTracking(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTracking(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracking(uint64(len(k))) + 1 + len(v) + sovTracking(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracking(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTracking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTracking(x uint64) (n int) {
	return sovTracking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Actor) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Actor{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *Application) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Application{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *StageEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&StageEvent{`,
		`Actor:` + strings.Replace(this.Actor.String(), "Actor", "Actor", 1) + `,`,
		`Application:` + strings.Replace(this.Application.String(), "Application", "Application", 1) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Intent:` + fmt.Sprintf("%v", this.Intent) + `,`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractionEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&InteractionEvent{`,
		`Actor:` + strings.Replace(this.Actor.String(), "Actor", "Actor", 1) + `,`,
		`Application:` + strings.Replace(this.Application.String(), "Application", "Application", 1) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Intent:` + fmt.Sprintf("%v", this.Intent) + `,`,
		`Interaction:` + fmt.Sprintf("%v", this.Interaction) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&VisitEvent{`,
		`Actor:` + strings.Replace(this.Actor.String(), "Actor", "Actor", 1) + `,`,
		`Application:` + strings.Replace(this.Application.String(), "Application", "Application", 1) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClickEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&ClickEvent{`,
		`Actor:` + strings.Replace(this.Actor.String(), "Actor", "Actor", 1) + `,`,
		`Application:` + strings.Replace(this.Application.String(), "Application", "Application", 1) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTracking(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Actor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &Application{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			m.Intent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intent |= Intent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= Stage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &Application{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			m.Intent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intent |= Intent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= Interaction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= InteractionChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &Application{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Application == nil {
				m.Application = &Application{}
			}
			if err := m.Application.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracking
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTracking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTracking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTracking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTracking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTracking = fmt.Errorf("proto: unexpected end of group")
)
